#include <systemc.h>
#include <iostream>

#define SIZE 6

class COMM_IF : public sc_interface {
public:
    virtual void write(int data) = 0;
    virtual int read() = 0;
    virtual bool is_fifo_not_empty() = 0;
    virtual void clear_fifo() = 0;
};

class PRIMITIVE_CHANNEL : public sc_prim_channel, public COMM_IF {
public:
    PRIMITIVE_CHANNEL(sc_module_name name) : sc_prim_channel(name), fifo(SIZE) {}

    void write(int data) override {
        fifo.write(data);
    }

    int read() override {
        return fifo.read();
    }

    bool is_fifo_not_empty(){
        return fifo.num_available() > 0;
    }

    void clear_fifo() override {
        while (fifo.num_available() > 0) {
            fifo.read();
        }
    }

private:
    sc_fifo<int> fifo;
};

SC_MODULE(ModuleA) {
    sc_port<COMM_IF> port;

    SC_CTOR(ModuleA) {
        SC_THREAD(run_tasks);
    }

    void run_tasks() {
        while (true) {
            task1();
            wait(10, SC_MS);
            task2();
            wait(10, SC_MS);
            task3();
            wait(10, SC_MS);
            task4();
            wait(10, SC_MS);
            task5();
            wait(10, SC_MS);
            task6();
            wait(10, SC_MS);
        }
    }

    void task1() {
        int input;
        std::cout << "Input: ";
        std::cin >> input;

        if (input == 0) {
            std::cout << "Task1: OFF" << std::endl;
			port->clear_fifo();
			std::cout << "FIFO Cleared" << std::endl;
        }
        else if (is_value_error(input)) {
            std::cout << "Error - niepoprawna kombinacja klawiszy" << std::endl;
			port->clear_fifo();
			std::cout << "FIFO Cleared" << std::endl;
        }
        
        for (size_t i = 0; i < SIZE; i++)
        {
          port->write(input);
        }
    }

    void task2() {
        if (port->is_fifo_not_empty()) {
            int val = port->read();
            if (val == 1) {
                std::cout << "Task2: blokada drzwi" << std::endl;
				port->clear_fifo();
				std::cout << "FIFO Cleared" << std::endl;
            }
        }
    }

    void task3() {
        if (port->is_fifo_not_empty()) {
            int val = port->read();
            if (val == 3) {
                std::cout << "Task3: blokada przed zalaniem" << std::endl;
				port->clear_fifo();
				std::cout << "FIFO Cleared" << std::endl;
            }
        }
    }

    void task4() {
        if (port->is_fifo_not_empty()) {
            int val = port->read();
            if (val == 7) {
                std::cout << "Task4: blokada przed przegrzaniem" << std::endl;
				port->clear_fifo();
				std::cout << "FIFO Cleared" << std::endl;
            }
        }
    }

    void task5() {
        if (port->is_fifo_not_empty()) {
            int val = port->read();
            if (val == 15) {
                std::cout << "Task5: blokada przyciskÃ³w" << std::endl;
				port->clear_fifo();
				std::cout << "FIFO Cleared" << std::endl;
			}
        }
    }

	void task6() {
        if (port->is_fifo_not_empty()) {
            int val = port->read();
            if (val == 31) {
                std::cout << "Task6: poziom detergentu I" << std::endl;
				port->clear_fifo();
				std::cout << "FIFO Cleared" << std::endl;
			}
        }
    }

	bool is_value_error(int value){
      return !(value == 0 || value == 1 || value == 3 || value == 7 || value == 15 || value == 31 || value == 63);
    }

    void bind_ports(COMM_IF & comm) {
        port(comm);
    }
};

SC_MODULE(ModuleB) {
    sc_port<COMM_IF> port;

    SC_CTOR(ModuleB) {
        SC_THREAD(run_task);
    }

    void run_task() {
        while (true) {
            task7();
            wait(60, SC_MS);
        }
    }

    void task7() {
        if (port->is_fifo_not_empty()) {
            int val = port->read();
            if (val == 63) {
                std::cout << "Task7: poziom detergentu II  - ERROR" << std::endl;
				port->clear_fifo();
				std::cout << "FIFO Cleared" << std::endl;
            }
        }
    }

    void bind_ports(COMM_IF & comm) {
        port(comm);
    }
};

int sc_main(int argc, char* argv[]) {
    PRIMITIVE_CHANNEL comm("Communication");

    ModuleA moduleA("ModuleA");
    moduleA.bind_ports(comm);

    ModuleB moduleB("ModuleB");
    moduleB.bind_ports(comm);

    sc_start();
    return 0;
}